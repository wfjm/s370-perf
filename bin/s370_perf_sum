#!/usr/bin/perl -w
# $Id: s370_perf_sum 1004 2018-03-31 12:20:15Z mueller $
#
# Copyright 2017-2018 by Walter F.J. Mueller <W.F.J.Mueller@gsi.de>
#
# This program is free software; you may redistribute and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 3, or at your option any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY, without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# for complete details.
#
#  Revision History:
# Date         Rev Version  Comment
# 2018-03-29  1002   1.0.8  add -ins (instruction name sorted output)
# 2018-03-10   999   1.0.7  print essential options; print file stats, w50 ect
# 2018-03-03   996   1.0.6  add -rat option
# 2018-02-23   994   1.0.5  add -fmis and -fsig options
# 2018-01-28   991   1.0.4  allow extra columns in input files (e.g. from -cp)
# 2018-01-13   989   1.0.3  handle negative times (even though they are faulty!)
# 2018-01-06   986   1.0.2  rename to s370_perf_sum
# 2017-12-02   967   1.0.1  fix 'overwrite' message
# 2017-11-18   963   1.0    Initial version
# 2017-11-16   962   0.1    First draft
#

use 5.14.0;                                 # require Perl 5.14 or higher
use strict;                                 # require strict checking
use Getopt::Long;

my %opts = ();
my %tag2txt;
my %tag2val;
my %tag2ins;
my %ftbl;
my $nfile = 0;

GetOptions(\%opts,
           'help', 'nrr', 'nrx', 'min', 'w50', 'rel','rat','ins',
           'fsig:1','fmis:1'
          )
  or die "bad options";


# handle help
if (defined $opts{help}) { do_help();  exit 0; }

#
# print essential options
#
my $opttxt;
$opttxt .= '  -nrr'                 if exists $opts{nrr};
$opttxt .= '  -nrx'                 if exists $opts{nrx};
$opttxt .= '  -min'                 if exists $opts{min};
$opttxt .= '  -w50'                 if exists $opts{w50};
$opttxt .= '  -rel'                 if exists $opts{rel};
$opttxt .= '  -rat'                 if exists $opts{rat};
$opttxt .= '  -ins'                 if exists $opts{ins};
$opttxt .= '  -fsig ' . $opts{fsig} if exists $opts{fsig};
$opttxt .= '  -fmis ' . $opts{fmis} if exists $opts{fmis};
printf "s370_perf_sum%s\n\n",$opttxt if defined $opttxt;
#
# handle input files
#

foreach my $fname (@ARGV) {
  $nfile += 1;
  my $fnum = sprintf '%02d',$nfile;
  $ftbl{$fnum}{fname} = $fname;
  do_file($fnum, $fname);
}

my @fnums = sort keys %ftbl;

do_show();

exit 0;

#
# -- do_help: print help text ------------------------------------------------
#

sub do_help {
  print "usage: s370_perf_sum [OPTIONS] [FILE]...\n";
  print "  -nrr       use n-rr (T100 normalized)\n";
  print "  -nrx       use n-rx (T102 normalized)\n";
  print "  -min       use min  (minimal time)\n";
  print "  -w50       use w50  (50% distribution width)\n";
  print "  -rel       show relative speed for each tag\n";
  print "  -rat       show in addition ratios relative to 1st file\n";
  print "  -ins       sort by instruction name\n";
  print "  -fmis[=n]  drop test line when n values missing\n";
  print "  -fsig[=n]  show test line only when differing by n percent\n";
  print "  -help      help text\n";
  return;
}

#
# -- do_file: handle input file ----------------------------------------------
#

sub do_file {
  my ($fnum,$fname) = @_;
  open IFILE,"<$fname" or die "failed to open $fname";

  my $ntest  = 0;
  my $tpisum = 0.;
  my $w50sum = 0.;
  my $w50max = 0.;
  while (<IFILE>) {
    chomp;
    if (m/^([DT]\d\d\d)\s+                  # tag
          (.*?)\s+:\s+                      # txt
          (\d+)\s+                          # nt
          (-|[0-9.]+)\s+                    # min
          (-|[0-9.]+)\s+                    # max
          (-?[0-9.]+)\s+                    # tpi
          ([0-9.]+)%\s+                     # w50
          (-?[0-9.]+)\s+                    # nrr
          (-?[0-9.]+)/x) {                  # nrx
      my $tag = $1;
      my $txt = $2;
      my $nt  = $3;
      my $min = ($4 ne '-') ? $4 : undef;
      my $max = ($5 ne '-') ? $5 : undef;
      my $tpi = $6;
      my $w50 = $7;
      my $nrr = $8;
      my $nrx = $9;
      ## printf "%s %-22s : %8.2f\n",$tag,$txt,$tpi;
      my $val = $tpi;
      $val = $nrr if $opts{nrr};
      $val = $nrx if $opts{nrx};
      $val = $min if $opts{min};
      $val = $w50 if $opts{w50};
      $ntest  += 1;
      $tpisum += $tpi;
      $w50sum += $tpi*$w50;
      $w50max  = $w50 if $w50 > $w50max;
      #
      if (exists $tag2txt{$tag} && $tag2txt{$tag} ne $txt) {
        printf STDERR "s370_perf_sum-W file '%s' overwrites text for tag '%s'\n",
          $fnum, $tag;
        printf STDERR "  old: %s\n", $tag2txt{$tag};
        printf STDERR "  new: %s\n", $txt;
      }
      $tag2txt{$tag} = $txt;
      $tag2val{$tag}{$fnum} = $val;
      if (($tag !~ m/^T9\d\d/ && $txt !~ m/;/) && $txt =~ m/(^[A-Z]+)/) {
        $tag2ins{$tag} = $1;
      }
    }
  }

  $ftbl{$fnum}{ntest}  = $ntest;
  $ftbl{$fnum}{w50avr} = $tpisum > 0. ? $w50sum/$tpisum : 0.;
  $ftbl{$fnum}{w50max} = $w50max;
  close IFILE;
  return;
}

#
# -- do_show: show analysis---------------------------------------------------
#

sub do_show {
  print "File num: name ----------------------------------- ".
        "#test w50-avr  w50-max\n";
  foreach my $fnum (@fnums) {
    printf "      %s: %-40s  %4d %6.2f%%  %6.1f%%\n",
      $fnum,
      $ftbl{$fnum}{fname},
      $ftbl{$fnum}{ntest},
      $ftbl{$fnum}{w50avr},
      $ftbl{$fnum}{w50max};
  }
  printf "\n";

  my $vnam = ' tpi';
  $vnam = ' nrr' if $opts{nrr};
  $vnam = ' nrx' if $opts{nrx};
  $vnam = ' min' if $opts{min};
  $vnam = 'w50_' if $opts{w50};
  printf "Tag   Comment                :";
  foreach my $fnum (@fnums) {
    printf "  %s%s%s", ($opts{rel}?'r-':'  '),$vnam,$fnum;
  }
  if ($opts{rat}) {
    printf " :";
    foreach my $fnum (@fnums) {
      next if $fnum eq '01';
      printf "  t%s/t01",$fnum;
    }
  }
  printf "\n";

  my @tlist;
  if ($opts{ins}) {
    @tlist = sort { $tag2ins{$a} cmp $tag2ins{$b} || $a cmp $b }  keys %tag2ins;
  } else {
    @tlist = map {s/^Z/D/;$_} sort map {s/^D/Z/;$_} keys %tag2txt;
  }

  foreach my $tag (@tlist) {
    my $line = sprintf "%s  %-22s :", $tag,$tag2txt{$tag};
    my @vals;
    foreach my $fnum (@fnums) {
      push @vals, $tag2val{$tag}{$fnum};
    }
    my $vmin = 1.e20;
    foreach my $val (@vals) {
      $vmin = $val if defined $val && $val > 0. && $val < $vmin;
    }
    my $nmis = 0;
    my $nsig = 0;
    foreach my $val (@vals) {
      if (defined $val) {
        if ($val > 0.) {
          my $vnor = $val/$vmin;
          $nsig += 1 if defined $opts{fsig} && $vnor >= 1. + 0.01 * $opts{fsig};
          $line .= sprintf " %9.2f", ($opts{rel} ? $vnor : $val);
        } else {
          $line .= sprintf "       <=0";
        }
      } else {
        $nmis += 1;
        $line .= sprintf "         -";
      }
    }
    if ($opts{rat}) {
      $line .= ' :';
      foreach my $val (@vals[1..$#vals]) {
        if (defined $vals[0] && defined $val) {
          if ( $vals[0] > 0. && $val > 0.) {
            $line .= sprintf " %8.3f", $val/$vals[0];
          } else {
            $line .= '      <=0';
          }
        } else {
          $line .= '        -';
        }
      }
    }
    next if defined $opts{fmis} && $nmis >= $opts{fmis};
    next if defined $opts{fsig} && $nsig == 0;
    print "$line\n";
  }
  return;
}

