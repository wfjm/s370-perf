#!/usr/bin/perl -w
# $Id: s370_perf_ana 1006 2018-04-02 11:47:50Z mueller $
#
# Copyright 2017-2018 by Walter F.J. Mueller <W.F.J.Mueller@gsi.de>
#
# This program is free software; you may redistribute and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 3, or at your option any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY, without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# for complete details.
#
#  Revision History:
# Date         Rev Version  Comment
# 2018-04-01  1006   2.0.1  fix bug in -ldf and -ltpi handling of Dxxx tags
# 2018-03-31  1004   2.0    re-organize code; use -w1 instead of -w2; add -tcal;
#                           support lt>2; add calculated tag lines (Dxxx)
# 2018-03-17  1000   1.4    cleanup ^L handling; add -dt,-dl,-du,-nonrr
# 2018-03-10   999   1.3.1  add -w2,-csv options; change -lrun to -nolrun
# 2018-03-03   996   1.3    print s370_perf version; add -raw,-t311,-t312
# 2018-02-24   994   1.2.1  add -d3 for fast systems
# 2018-01-28   991   1.2    add chktag; add -cf,-cp,-cn
# 2018-01-06   986   1.1.2  rename to s370_perf_ana
# 2017-12-16   970   1.1.1  add sprt() for sliding precision in output
# 2017-12-10   969   1.1    adopt to new file format; add loop timing correction
# 2017-11-16   962   1.0    Initial version
# 2017-10-15   956   0.1    First draft
#

use 5.14.0;                                 # require Perl 5.14 or higher
use strict;                                 # require strict checking
use Getopt::Long;

my %opts = ();

GetOptions(\%opts, 'help', 'ltpi', 'ldf',
           'raw', 'csv', 'nolrun', 'nolcor', 'nonrr', 'ttim','tcal',
           'dt=f','dl=f','du=f',
           'd1', 'd3','w1','w3',
           't311=f','t312=f',
           'cf=f', 'cp=f', 'cn=i')
  or die "bad options";

my %tags;
my @tcortbl = ([],                                # lt=0  empty
               [{tag=>'T311',ins=>'BCTR'}],       # lt=1  BCTR
               [{tag=>'T312',ins=>'BCT'}],        # lt=2  BCT
               [{tag=>'T100',ins=>'LR'},
                {tag=>'T311',ins=>'BCTR'}],       # lt=3  LR,BCTR
               [{tag=>'T101',ins=>'LA'},
                {tag=>'T311',ins=>'BCTR'}],       # lt=4  LA,BCTR
               [{tag=>'T101',ins=>'LA'},
                {tag=>'T230',ins=>'XR'},
                {tag=>'T311',ins=>'BCTR'}],       # lt=5  LA,XR,BCTR
               [{tag=>'T101',ins=>'LA'},
                {tag=>'T101',ins=>'LA'},
                {tag=>'T101',ins=>'LA'},
                {tag=>'T311',ins=>'BCTR'}],       # lt=6  3*LA,BCTR
               [{tag=>'T150',ins=>'MVC'},
                {tag=>'T311',ins=>'BCTR'}],       # lt=7  MVC(5c),BCTR
               [{tag=>'T152',ins=>'MVC'},
                {tag=>'T311',ins=>'BCTR'}],       # lt=8  MVC(15c),BCTR
               [{tag=>'T501',ins=>'LE'},
                {tag=>'T311',ins=>'BCTR'}],       # lt=9  LE,BCTR
               [{tag=>'T531',ins=>'LD'},
                {tag=>'T311',ins=>'BCTR'}],       # lt=10 LD,BCTR
               [{tag=>'T531',ins=>'LD'},
                {tag=>'T531',ins=>'LD'},
                {tag=>'T311',ins=>'BCTR'}]        # lt=11 2*LD,BCTR
              );
my @dtagtbl = (
               {tag=>'D170',txt=>'MVCL (10b)',
                act=>[{m=>1.,t=>'T170'},{m=>-2.,t=>'T100'},{m=>-2.,t=>'T101'}]},
               {tag=>'D171',txt=>'MVCL (100b)',
                act=>[{m=>1.,t=>'T171'},{m=>-2.,t=>'T100'},{m=>-2.,t=>'T101'}]},
               {tag=>'D172',txt=>'MVCL (250b)',
                act=>[{m=>1.,t=>'T172'},{m=>-2.,t=>'T100'},{m=>-2.,t=>'T101'}]},
               {tag=>'D173',txt=>'MVCL (1kb)',
                act=>[{m=>1.,t=>'T173'},{m=>-2.,t=>'T100'},{m=>-2.,t=>'T101'}]},
               {tag=>'D174',txt=>'MVCL (4kb)',
                act=>[{m=>1.,t=>'T174'},{m=>-4.,t=>'T100'}]},
               {tag=>'D175',txt=>'MVCL (100b,pad)',
                act=>[{m=>1.,t=>'T175'},{m=>-2.,t=>'T100'},{m=>-2.,t=>'T101'}]},
               {tag=>'D176',txt=>'MVCL (1kb,pad)',
                act=>[{m=>1.,t=>'T176'},{m=>-2.,t=>'T100'},{m=>-2.,t=>'T101'}]},
               {tag=>'D177',txt=>'MVCL (4kb,pad)',
                act=>[{m=>1.,t=>'T177'},{m=>-3.,t=>'T100'},{m=>-1.,t=>'T101'}]},
               {tag=>'D178',txt=>'MVCL (1kb,over1)',
                act=>[{m=>1.,t=>'T178'},{m=>-4.,t=>'T101'}]},
               {tag=>'D179',txt=>'MVCL (1kb,over2)',
                act=>[{m=>1.,t=>'T179'},{m=>-4.,t=>'T101'}]},
               {tag=>'D215',txt=>'DR R,R',
                act=>[{m=>1.,t=>'T215'},{m=>-1.,t=>'T230'}]},
               {tag=>'D216',txt=>'D R,m',
                act=>[{m=>1.,t=>'T216'},{m=>-1.,t=>'T230'}]},
               {tag=>'D280',txt=>'CLCL (100b,10b)',
                act=>[{m=>1.,t=>'T280'},{m=>-4.,t=>'T100'}]},
               {tag=>'D281',txt=>'CLCL (4kb,10b)',
                act=>[{m=>1.,t=>'T281'},{m=>-4.,t=>'T100'}]},
               {tag=>'D282',txt=>'CLCL (4kb,100b)',
                act=>[{m=>1.,t=>'T282'},{m=>-4.,t=>'T100'}]},
               {tag=>'D283',txt=>'CLCL (4kb,250b)',
                act=>[{m=>1.,t=>'T283'},{m=>-4.,t=>'T100'}]},
               {tag=>'D284',txt=>'CLCL (4kb,1kb)',
                act=>[{m=>1.,t=>'T284'},{m=>-4.,t=>'T100'}]},
               {tag=>'D285',txt=>'CLCL (4kb,4kb)',
                act=>[{m=>1.,t=>'T285'},{m=>-4.,t=>'T100'}]},
               {tag=>'D290',txt=>'CS R,R,m (eq,eq)',
                act=>[{m=>1.,t=>'T290'},{m=>-1.,t=>'T100'}]},
               {tag=>'D291',txt=>'CS R,R,m (eq,ne)',
                act=>[{m=>1.,t=>'T291'},{m=>-1.,t=>'T100'}]},
               {tag=>'D292',txt=>'CS R,R,m (ne)',
                act=>[{m=>1.,t=>'T292'},{m=>-1.,t=>'T100'}]},
               {tag=>'D295',txt=>'CDS R,R,m (eq,eq)',
                act=>[{m=>1.,t=>'T295'},{m=>-1.,t=>'T100'}]},
               {tag=>'D296',txt=>'CDS R,R,m (eq,ne)',
                act=>[{m=>1.,t=>'T296'},{m=>-1.,t=>'T100'}]},
               {tag=>'D297',txt=>'CDS R,R,m (ne)',
                act=>[{m=>1.,t=>'T297'},{m=>-1.,t=>'T100'}]},
               {tag=>'D320',txt=>'BALR R,R',
                act=>[{m=>1.,t=>'T320'},{m=>-1.,t=>'T304'}]},
               {tag=>'D321',txt=>'BALR R,R (far)',
                act=>[{m=>1.,t=>'T321'},{m=>-1.,t=>'T305'}]},
               {tag=>'D322',txt=>'BAL R,R',
                act=>[{m=>1.,t=>'T322'},{m=>-1.,t=>'T304'}]},
               {tag=>'D323',txt=>'BAL R,R (far)',
                act=>[{m=>1.,t=>'T323'},{m=>-1.,t=>'T305'}]},
               {tag=>'D324',txt=>'BASR R,R',
                act=>[{m=>1.,t=>'T324'},{m=>-1.,t=>'T304'}]},
               {tag=>'D325',txt=>'BAS R,R',
                act=>[{m=>1.,t=>'T325'},{m=>-1.,t=>'T304'}]},
               {tag=>'D410',txt=>'ED (10c)',
                act=>[{m=>1.,t=>'T410'},{m=>-1.,t=>'T151'}]},
               {tag=>'D411',txt=>'ED (30c)',
                act=>[{m=>1.,t=>'T411'},{m=>-1.,t=>'T153'}]},
               {tag=>'D415',txt=>'EDMK (10c)',
                act=>[{m=>1.,t=>'T415'},{m=>-1.,t=>'T151'}]},
               {tag=>'D426',txt=>'DP m,m (10d)',
                act=>[{m=>1.,t=>'T426'},{m=>-1.,t=>'T150'}]},
               {tag=>'D427',txt=>'DP m,m (30d)',
                act=>[{m=>1.,t=>'T427'},{m=>-1.,t=>'T152'}]},
               {tag=>'D610',txt=>'EX R,i (bare, via TM)',
                act=>[{m=>1.,t=>'T610'},{m=>-1.,t=>'T250'}]},
               {tag=>'D611',txt=>'EX R,i (bare, via XI)',
                act=>[{m=>1.,t=>'T611'},{m=>-1.,t=>'T232'}]},
               {tag=>'D620',txt=>'TS m (zero)',
                act=>[{m=>1.,t=>'T620'},{m=>-1.,t=>'T160'}]},
               {tag=>'D621',txt=>'TS m (ones)',
                act=>[{m=>1.,t=>'T621'},{m=>-1.,t=>'T160'}]}
              );

my $s370_perf_vers;

my $csv = $opts{csv};
my $dolcor = not exists $opts{nolcor};

# handle help
if (defined $opts{help}) { do_help();  exit 0; }

# handle -cf, map to -cp
$opts{cp} = 1000./$opts{cf} if exists $opts{cf};

# handle -dt, -dl, -du
if ((exists $opts{dt} && ($opts{dt} < 0. || $opts{dt} > 1.)) ||
    (exists $opts{dl} && ($opts{dl} < 0. || $opts{dl} > 1.)) ||
    (exists $opts{du} && ($opts{du} < 0. || $opts{du} > 1.))) {
  print "s370_perf_ana-E bad value, -dt,dl and -du must be in [0.,1.] \n";
  exit 1;
}
my $dt = 0.50;
my $dl = 0.25;
my $du = 0.75;
if (exists $opts{dt}) {
  $dt = $opts{dt};
  $dl = $dt - 0.25;
  $du = $dt + 0.25;
  if ($dl < 0.) {$dl = 0.0; $du = 0.5;}
  if ($du > 1.) {$dl = 0.5; $du = 1.0;}
}
$dl = $opts{dl} if exists  $opts{dl};
$du = $opts{du} if exists  $opts{du};
if ($du <= $dl) {
  print "s370_perf_ana-E bad values, -du must be larger than -dl\n";
  exit 1;
}

#
# setup formats
#
my $t_fmt1 = '%7.1f';
my $t_fmt2 = '%8.2f';
my $t_fmt3 = '%10.2f';
if ($opts{d1}) {
  $t_fmt1 = '%7.0f';
  $t_fmt2 = '%8.1f';
  $t_fmt3 = '%10.1f';
}
if ($opts{d3}) {
  $t_fmt1 = '%7.2f';
  $t_fmt2 = '%8.3f';
  $t_fmt3 = '%10.3f';
}
my $w_fmt = '%5.2f';
if ($opts{w1}) {
  $w_fmt = '%5.1f';
}
if ($opts{w3}) {
  $w_fmt = '%5.3f';
}

#
# print essential options
#
my $opttxt;
$opttxt .= '  -raw'                 if exists $opts{raw};
$opttxt .= '  -nolcor'              if exists $opts{nolcor};
$opttxt .= '  -nonrr'               if exists $opts{nonrr};
$opttxt .= '  -ttim'                if exists $opts{ttim};
$opttxt .= '  -dt '   . $opts{dt}   if exists $opts{dt};
$opttxt .= '  -dl '   . $opts{dl}   if exists $opts{dl};
$opttxt .= '  -du '   . $opts{du}   if exists $opts{du};
$opttxt .= '  -cf '   . $opts{cf}   if exists $opts{cf};
$opttxt .= '  -cp '   . sprintf '%6.3f',$opts{cp} if exists $opts{cp};
$opttxt .= '  -cn '   . $opts{cn}   if exists $opts{cn};
$opttxt .= '  -t311 ' . $opts{t311} if exists $opts{t311};
$opttxt .= '  -t312 ' . $opts{t312} if exists $opts{t312};
printf "s370_perf_ana%s\n\n",$opttxt if defined $opttxt && not $csv;
#
# handle input files
#

print "file name ----------------------------".
      "  GMUL  i-count  -- total time --   MIPS\n" unless $opts{nolrun} || $csv;

foreach my $fname (@ARGV) {
  do_file($fname);
}

unless ($csv) {
  print "s370_perf version: $s370_perf_vers\n" if defined $s370_perf_vers;
  print "\n" unless $opts{nolrun};
}

do_anal();
do_calc() unless $opts{raw};
do_show();

exit 0;

#
# -- do_help: print help text ------------------------------------------------
#

sub do_help {
  print "usage: s370_perf_ana [OPTIONS] [FILE]...\n";
  print "  -d1      decrease time field precision (for slow systems)\n";
  print "  -d3      increase time field precision (for fast systems)\n";
  print "  -w1      decrease w50 field precision\n";
  print "  -w3      increase w50 field precision\n";
  print "  -nolcor  no loop (bctr/bct) timing correction\n";
  print "  -nonrr   fill n-rr and n-rx with 0.0 dummy data\n";
  print "  -dt=f    cdf lookup value for tpi extraction (default 0.5)\n";
  print "  -dl=f    cdf lookup value lower end of w50 interval\n";
  print "  -du=f    cdf lookup value upper end of w50 interval\n";
  print "  -t311=t  override time used for bctr loop correction\n";
  print "  -t312=t  override time used for bct  loop correction\n";
  print "  -nolrun  suppress file/run statistics\n";
  print "  -ltpi    list per run tpi values\n";
  print "  -ldf     list tpi distribution function\n";
  print "  -raw     show raw data\n";
  print "  -csv     output in csv format for spreadsheet import\n";
  print "  -cp=p    specify clock period (in ns)\n";
  print "  -cf=f    specify clock frequency (in MHz)\n";
  print "  -cn=n    number of clock phases (default = 1)\n";
  print "  -ttim    use test time field (instead of instruction time)\n";
  print "  -tcal    trace calculation steps\n";
  print "  -help    help text\n";
  return;
}

#
# -- do_file: handle input file ----------------------------------------------
#

sub do_file {
  my ($fname) = @_;
  open IFILE,"<$fname" or die "failed to open $fname";

  my $resok = 0;
  my $gmul  = 0;
  my $gtim  = 0;
  my $gcnt  = 0;
  my $vers;

  while (<IFILE>) {
    chomp;
    s{\r}{}g;                               # drop ^M
    my @lines = split /\f/,$_;              # split on lone ^L
    foreach (@lines) {
      $gmul  = $1 if m/^PERF002I run with GMUL=\s*(\d+)/;
      if (m/^PERF003I start with tests/) {
        $resok = 1;
        $gtim  = 0.;
        $gcnt  = 0;
      }
      if (m/^PERF000I VERS:\s*(.*)$/) {
        if (defined $s370_perf_vers && $s370_perf_vers ne $1) {
          print "s370_perf_ana-W mixed s370_perf version: $1\n";
        }
        $s370_perf_vers = $1;
      }
      next unless $resok;

      if (m/^(T\d\d\d)\s+                     # tag
            ([^:]*?)\s+:\s+                   # txt
            (\d+\.\d+)\s+                     # test time
            (\d+)\s+                          # lrcnt
            (\d+)\s+                          # igcnt
            (\d+)\s+:\s+                      # ltype
            (\d+\.\d+)\s*$/x) {               # tpi
        my $tag   = $1;
        my $txt   = $2;
        my $tim   = $3;
        my $lrcnt = $4;
        my $igcnt = $5;
        my $ltype = $6;
        my $tpi   = $7;
        ##printf "%s %-28s %6.2f %8d %6.4f\n",
        ##       $tag,$txt,$tim,$lrcnt,$igcnt,$ltype,$tpi;
        if (not exists $tags{$tag}) {
          $tags{$tag}{txt} = $txt;
        } else {
          if ($tags{$tag}{txt} ne $txt) {
            $tags{$tag}{txt} = $txt;
            print "s370_perf_ana-W tag text for $tag redefined\n";
          }
        }
        my $lcnt = 1. * $gmul * $lrcnt * $igcnt;
        $tpi = 1.e6 * $tim / $lcnt if ($opts{ttim});
        $gcnt += $lcnt;
        $gtim += $lcnt * $tpi * 1.e-6;
        push @{$tags{$tag}{tpival}},(1000.*$tpi);
        $tags{$tag}{lrcnt} = $lrcnt;
        $tags{$tag}{igcnt} = $igcnt;
        $tags{$tag}{ltype} = $ltype;
      } else {
        print "s370_perf_ana-W failed to parse apparent test line\n'$_'\n"
          if m/^(T\d\d\d)\s+/;
      }

      if (m/^PERF004I done with tests/) {
        $resok = 0;
        unless ($opts{nolrun} || $csv) {
          my $gtim_min = int ($gtim/60.);
          my $gtim_sec = $gtim - 60.*$gtim_min;
          my $mips = ($gtim>0) ? 1.e-6*$gcnt/$gtim : 0.;
          printf "%-38s %5d %8.2e  %6.2fs %2dm%05.2f %6.1f\n",
            substr($fname,-38),$gmul,$gcnt,$gtim,$gtim_min,$gtim_sec,$mips;
        }
      }
    }
  }

  close IFILE;
  return;
}

#
# -- do_anal: do analysis ----------------------------------------------------
#

sub do_anal {
  foreach my $tag (sort keys %tags) {
    my @tpisort = sort { $a <=> $b } @{$tags{$tag}{tpival}};
    ## printf "%s : %s\n",$tag,join(",", @tpisort);
    my $tpicnt = scalar(@tpisort);
    my $tpimin = $tpisort[0];
    my $tpimax = $tpisort[-1];
    my $dfl = df_lookup(\@tpisort, $dl);
    my $dft = df_lookup(\@tpisort, $dt);
    my $dfu = df_lookup(\@tpisort, $du);
    $tags{$tag}{tpicnt} = $tpicnt;
    $tags{$tag}{tpimin} = $tpimin;
    $tags{$tag}{tpimax} = $tpimax;
    $tags{$tag}{tpimed} = $dft;
    $tags{$tag}{tpiw50} = $dfu-$dfl;
    $tags{$tag}{tpicor} = $dft;
  }

  return unless $dolcor;

  my %ctagcnt;
  foreach my $tag (sort keys %tags) {
    my $ltype  = $tags{$tag}{ltype};
    if ($ltype < 0 && $ltype > $#tcortbl) {
      printf "s370_perf_ana-E: bad lt=%2d for tag %s\n", $ltype,$tag;
      next;
    }
    foreach my $ltlst ($tcortbl[$ltype]) {
      foreach my $ltdsc (@{$ltlst}) {
        my $ctag = $ltdsc->{tag};
        my $cins = $ltdsc->{ins};
        next if chktag($ctag,$cins,$ltype);
        push @{$tags{$tag}{caltags}},$ctag;
        $ctagcnt{$ctag} += 1;
      }
    }
  }

  print "--- tpicor for tags used in corrections\n" if $opts{tcal};
  do_anal_cor(\%ctagcnt,1);
  print "\n--- tpicor for all tags\n" if $opts{tcal};
  do_anal_cor(\%tags,0);
  print "\n" if $opts{tcal};

  return;
}

#
# -- do_anal_cor: determine tpicor -------------------------------------------
#
sub do_anal_cor {
  my ($href,$prtcnt) = @_;
  foreach my $tag (sort keys %{$href}) {
    my $corsum = 0.;
    my @corlst;
    foreach my $ctag (@{$tags{$tag}{caltags}}) {
      my $cor = get_tpimed($ctag);
      push @corlst,sprt($cor,$t_fmt2) if $opts{tcal};
      $corsum += $cor / $tags{$tag}{igcnt};
    }
    $tags{$tag}{tpicor} = $tags{$tag}{tpimed} - $corsum;

    next unless $opts{tcal};

    printf 'for %s %4.1f%%:',$tag, 100.*$corsum/$tags{$tag}{tpimed};
    printf ' (%3d)',$href->{$tag} if $prtcnt;
    printf ' %s = %s',
      sprt($tags{$tag}{tpicor},$t_fmt2),
      sprt($tags{$tag}{tpimed},$t_fmt2);
    printf ' - (%s) /%3d ; %s',
      join(' +',@corlst),
      $tags{$tag}{igcnt},
      join(',',@{$tags{$tag}{caltags}})
      if scalar(@{$tags{$tag}{caltags}});
    print "\n";
  }
}

#
# -- do_calc: determine calculated tags --------------------------------------
#

sub do_calc {
  print "--- calculation of new tags\n" if $opts{tcal};
  foreach my $cdsc (@dtagtbl) {
    my $dtag = $cdsc->{tag};
    my $dtxt = $cdsc->{txt};
    my $dact = $cdsc->{act};
    my $nact = scalar(@{$dact});
    my $vsum = 0.;
    my $esum = 0.;
    my $rsum = 0;
    my $cnt  = 0;
    printf 'for %s: \'%s\' = ',$dtag,$dtxt if $opts{tcal};
    foreach my $cele (@{$dact}) {
      my $tag = $cele->{t};
      my $fac = $cele->{m};
      if ($opts{tcal}) {
        printf '%s', (($cnt == 0) ? '' : ($fac < 0) ? ' - ' : ' + ');
        printf '%3.1f * ', abs($fac) if abs($fac) != 1.;
        if (exists $tags{$tag}) {
          printf '\'%s\'', $tags{$tag}{txt};
        } else {
          printf '%s MISS -> ABORT', $tag;
        }
      }
      last unless exists $tags{$tag};
      my $dval = $fac * $tags{$tag}{tpicor};
      my $derr = ($dval/$tags{$tag}{tpimed}) * $tags{$tag}{tpiw50};
      $vsum += $dval;
      $esum += $derr * $derr;
      $rsum += $tags{$tag}{tpicnt};
      $cnt  += 1;
    }
    printf "\n" if $opts{tcal};
    next unless $cnt == $nact;
    my $w50 = ($vsum > 0.) ? sqrt($esum) : 0.;
    $tags{$dtag} = {txt=>$dtxt,
                    tpicnt=>$rsum/$nact,
                    tpimin=>undef,
                    tpimax=>undef,
                    tpimed=>$vsum,
                    tpicor=>$vsum,
                    tpiw50=>$w50};
  }
  print "\n" if $opts{tcal};
}

#
# -- do_show: show analysis---------------------------------------------------
#

sub do_show {
  $opts{nonrr} = 1 if chktag('T100','LR');  # assume -nonrr of T100 not found
  $opts{nonrx} = 1 if chktag('T102','L');   # assume -nonrr of T102 not found
  my $norrr = $tags{T100}{tpicor};
  my $norrx = $tags{T102}{tpicor};

  my $del  = $csv ? '|' : ' ';
  my $edel = $csv ? '|' : ':';
  my $psym = $csv ? '%' : '%';

  #
  # print heading line
  #
  printf 'Tag ';
  printf '%s Comment                ',$del;
  printf '%s nr',$edel;
  unless ($opts{raw}) {
    printf '%s    min', $del;
    printf '%s    max', $del;
    printf '%s     tpi', $del;
    printf '%s  w50%s', $del,$psym;
    printf '%s   n-rr', $del;
    printf '%s  n-rx',  $del;
  } else {
    printf '%s     lr',    $del;
    printf '%s ig',        $del;
    printf '%slt',         $del;
    printf '%s       raw', $del;
    printf '%s  w50%s',    $del,$psym;
  }
  if ($opts{cp}) {
    printf '%s   n-cp', $del;
    printf '%s e-cp%s', $del,$psym;
    printf '%s  mcc',   $del;;
  }
  printf '%s  scc',$del if $opts{cn};
  printf "\n";

  #
  # print test lines
  #
  foreach my $tag (map {s/^Z/D/;$_} sort map {s/^D/Z/;$_} keys %tags) {
    my $w50pcent = 100.*$tags{$tag}{tpiw50}/$tags{$tag}{tpimed};
    my $nrr = (defined $opts{nonrr}) ? 0.0 : $tags{$tag}{tpicor}/$norrr;
    my $nrx = (defined $opts{nonrr}) ? 0.0 : $tags{$tag}{tpicor}/$norrx;

    printf '%s',        $tag;
    printf '%s %-22s ', $del, $tags{$tag}{txt};
    printf '%s%3d',     $edel, $tags{$tag}{tpicnt};

    unless ($opts{raw}) {
      printf '%s%s',   $del,sprt($tags{$tag}{tpimin},$t_fmt1);
      printf '%s%s',   $del,sprt($tags{$tag}{tpimax},$t_fmt1);
      printf '%s%s',   $del,sprt($tags{$tag}{tpicor},$t_fmt2);
      printf '%s%s%s', $del,sprt($w50pcent,$w_fmt), $psym;
      printf '%s%s',   $del,sprt($nrr,'%7.2f');
      printf '%s%s',   $del,sprt($nrx,'%6.2f');
    } else {
      my $totraw = $tags{$tag}{igcnt}*$tags{$tag}{tpimed};
      printf '%s%7d',  $del,$tags{$tag}{lrcnt};
      printf '%s%3d',  $del,$tags{$tag}{igcnt};
      printf '%s%2d',  $del,$tags{$tag}{ltype};
      printf '%s%s',   $del,sprt($totraw,$t_fmt3);
      printf '%s%s%s', $del,sprt($w50pcent,$w_fmt), $psym;
    }
    if (exists $opts{cp}) {
      my $time = $opts{raw} ?
                   $tags{$tag}{igcnt}*$tags{$tag}{tpimed} :
                   $tags{$tag}{tpicor};
      my $ncp = $time / $opts{cp};
      my $cc  = int($ncp + 0.5);
      my $ecp = 100. * ($ncp - $cc);
      printf '%s%s',    $del,sprt($ncp,'%7.2f');
      printf '%s%5d%s', $del,$ecp,$psym;
      if (exists $opts{cn}) {
        my $mcc = int($cc/$opts{cn});
        my $scc = $cc - $mcc * $opts{cn};
        printf '%s%5d',$del,$mcc;
        printf '%s%5d',$del,$scc;
      } else {
        printf '%s%5d',$del,$cc;
      }
    }
    print "\n";

    if ($opts{ltpi} && not $csv) {
      next unless exists $tags{$tag}{tpival};
      my $ival = 0;
      my $nval = scalar(@{$tags{$tag}{tpival}});
      foreach my $val (@{$tags{$tag}{tpival}}) {
        print  '  tpi:' if $ival%5 == 0;
        printf '  %8.3f',$val;
        $ival += 1;
        print "\n" if $ival%5 == 0;
      }
      print "\n" unless $ival%5 == 0;
    }
    if ($opts{ldf} && not $csv) {
      next unless exists $tags{$tag}{tpival};
      my @tpisort = sort { $a <=> $b } @{$tags{$tag}{tpival}};
      my $ival = 0;
      my $nval = scalar(@tpisort);
      foreach my $val (@tpisort) {
        print  '  cdf:' if $ival%5 == 0;
        printf '  %8.3f',$val;
        $ival += 1;
        print "\n" if $ival%5 == 0;
      }
      print "\n" unless $ival%5 == 0;

      printf "  %4.2f: %8.3f\n", $dl,df_lookup(\@tpisort, $dl);
      printf "  %4.2f: %8.3f\n", $dt,df_lookup(\@tpisort, $dt);
      printf "  %4.2f: %8.3f\n", $du,df_lookup(\@tpisort, $du);
    }
  }
  return;
}

#
# -- chktag: check existence and instruction match of tag --------------------
#

sub chktag {
  my ($tag,$ins,$lt) = @_;
  my $lttxt = (defined $lt) ? sprintf(" lt=%2d:",$lt) : '';
  if (not exists $tags{$tag}) {
    printf "s370_perf_ana-W:%s tag %s not found\n", $lttxt,$tag;
    return 1;
  }
  my ($tagins) = ($tags{$tag}{txt} =~ m/(^[A-Z]+)/);
  if ($tagins ne $ins) {
    printf "s370_perf_ana-E:%s instruction mismatch for %s,".
           " seen %s, expected %s\n", $lttxt,$tag,$tagins,$ins;
    return 1;
  }
  return 0;
}

#
# -- df_lookup: lookup df ----------------------------------------------------
#
sub df_lookup {
  my ($df,$frac) = @_;
  my $nval = scalar(@{$df});
  return 0.        if $nval == 0;
  return $df->[0]  if $nval == 1;
  my $imax = $nval - 1;
  my $rind = $frac * $imax;
  my $ind  = int $rind;
  return $df->[$ind] if $ind == $imax;
  my $find = $rind - $ind;
  return (1.-$find)*$df->[$ind] + $find*$df->[$ind+1];
}

#
# -- get_tpimed : get tpimed or overide if option given ----------------------
#

sub get_tpimed {
  my ($tag) = @_;
  my $val = (exists $tags{$tag}{tpimed}) ? $tags{$tag}{tpimed} : 0.;
  $val = $opts{t311} if $tag eq 'T311' && defined $opts{t311};
  $val = $opts{t312} if $tag eq 'T312' && defined $opts{t312};
  return $val;
}

#
# -- sprt: sprintf with sliding precision ------------------------------------
#

sub sprt {
  my ($val,$fmt) = @_;
  my ($ndig,$prec) = ($fmt =~ m/^%(\d+)\.(\d+)f$/);
  return ' 'x($ndig-1).'-' unless defined $val;

  my $str   = sprintf $fmt,$val;
  my $ntrim = length($str) - $ndig;
  if ($ntrim > 0) {
    if ($ntrim <= $prec+1) {
      $str = substr $str,0,$ndig;
    } else {
      $str = substr $str,0,length($str)-($prec+1);
    }
  }
  return $str;
}
